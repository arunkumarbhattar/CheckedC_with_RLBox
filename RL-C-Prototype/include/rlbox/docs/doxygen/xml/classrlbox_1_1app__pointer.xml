<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classrlbox_1_1app__pointer" kind="class" language="C++" prot="public">
    <compoundname>rlbox::app_pointer</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename T_Sbx</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrlbox_1_1app__pointer_1afde2232d3a1e0a1a98cacb28cab75d5f" prot="private" static="no" mutable="no">
        <type><ref refid="classrlbox_1_1app__pointer__map" kindref="compound">app_pointer_map</ref>&lt; typename T_Sbx::T_PointerType &gt; *</type>
        <definition>app_pointer_map&lt;typename T_Sbx::T_PointerType&gt;* rlbox::app_pointer&lt; T, T_Sbx &gt;::map</definition>
        <argsstring></argsstring>
        <name>map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="194" column="19" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1app__pointer_1a9ebd318f1fc8716a48548ba8e34c82fa" prot="private" static="no" mutable="no">
        <type>T_Sbx::T_PointerType</type>
        <definition>T_Sbx::T_PointerType rlbox::app_pointer&lt; T, T_Sbx &gt;::idx</definition>
        <argsstring></argsstring>
        <name>idx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="195" column="33" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrlbox_1_1app__pointer_1a055dff0387ef3033e81f5d11e2381d77" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T rlbox::app_pointer&lt; T, T_Sbx &gt;::idx_unsandboxed</definition>
        <argsstring></argsstring>
        <name>idx_unsandboxed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="196" column="5" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a9d0e4569cf9012d6c499b7af30a57e72" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rlbox::app_pointer&lt; T, T_Sbx &gt;::move_obj</definition>
        <argsstring>(app_pointer &amp;&amp;other)</argsstring>
        <name>move_obj</name>
        <param>
          <type><ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="198" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="198" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a496a550f093c1598827246b828b26aa2" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T</type>
        <definition>T rlbox::app_pointer&lt; T, T_Sbx &gt;::get_raw_value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_raw_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="208" column="12" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1ac431668747389fe131382a37086fedcb" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T_Sbx::T_PointerType</type>
        <definition>T_Sbx::T_PointerType rlbox::app_pointer&lt; T, T_Sbx &gt;::get_raw_sandbox_value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_raw_sandbox_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="212" column="40" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1aa37f6d1b9ceca769cf70e280c47c9876" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T</type>
        <definition>T rlbox::app_pointer&lt; T, T_Sbx &gt;::get_raw_value</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_raw_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="216" column="12" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a9a93a22c43b022e662c8b80539aba625" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T_Sbx::T_PointerType</type>
        <definition>T_Sbx::T_PointerType rlbox::app_pointer&lt; T, T_Sbx &gt;::get_raw_sandbox_value</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_raw_sandbox_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="217" column="40" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a9a779d2058178928e060a2d69c78b719" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rlbox::app_pointer&lt; T, T_Sbx &gt;::app_pointer</definition>
        <argsstring>(app_pointer_map&lt; typename T_Sbx::T_PointerType &gt; *a_map, typename T_Sbx::T_PointerType a_idx, T a_idx_unsandboxed)</argsstring>
        <name>app_pointer</name>
        <param>
          <type><ref refid="classrlbox_1_1app__pointer__map" kindref="compound">app_pointer_map</ref>&lt; typename T_Sbx::T_PointerType &gt; *</type>
          <declname>a_map</declname>
        </param>
        <param>
          <type>typename T_Sbx::T_PointerType</type>
          <declname>a_idx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>a_idx_unsandboxed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="222" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="222" bodyend="228"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a36b2cfadbbe96bfa3a23fed185617c75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rlbox::app_pointer&lt; T, T_Sbx &gt;::app_pointer</definition>
        <argsstring>()</argsstring>
        <name>app_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="231" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a44b6cb107e00d8869078bccd4f76233f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rlbox::app_pointer&lt; T, T_Sbx &gt;::~app_pointer</definition>
        <argsstring>()</argsstring>
        <name>~app_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="237" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a845c3f2be96091b1ab10ccab774a785b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rlbox::app_pointer&lt; T, T_Sbx &gt;::app_pointer</definition>
        <argsstring>(app_pointer &amp;&amp;other)</argsstring>
        <name>app_pointer</name>
        <param>
          <type><ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="239" column="3" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1abb7d911d68637690a990059b2f80aba4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref> &amp;</type>
        <definition>app_pointer &amp; rlbox::app_pointer&lt; T, T_Sbx &gt;::operator=</definition>
        <argsstring>(app_pointer &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="244" column="22" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a91150874c356edccc9ba9e18256c3a77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rlbox::app_pointer&lt; T, T_Sbx &gt;::unregister</definition>
        <argsstring>()</argsstring>
        <name>unregister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="252" column="8" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="252" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a626396f9c3be8c549bc35b11fe9d0158" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrlbox_1_1tainted" kindref="compound">tainted</ref>&lt; T, T_Sbx &gt;</type>
        <definition>tainted&lt; T, T_Sbx &gt; rlbox::app_pointer&lt; T, T_Sbx &gt;::to_tainted</definition>
        <argsstring>()</argsstring>
        <name>to_tainted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="262" column="11" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a69b1e2004b643206b8141ab876aa9685" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rlbox::app_pointer&lt; T, T_Sbx &gt;::is_unregistered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_unregistered</name>
        <briefdescription>
<para>Check if app pointer is <emphasis>not</emphasis> registered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="271" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a71209edbd57c65cd36d0b5c2c03fde3f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::app_pointer&lt; T, T_Sbx &gt;::UNSAFE_unverified</definition>
        <argsstring>() const noexcept</argsstring>
        <name>UNSAFE_unverified</name>
        <briefdescription>
<para>Unwrap <ref refid="classrlbox_1_1app__pointer" kindref="compound">app_pointer</ref> without verification. This is an unsafe operation and should be used with care. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="277" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a1e5d8a1865acf9d29d53f0e8543e3fa2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::app_pointer&lt; T, T_Sbx &gt;::UNSAFE_sandboxed</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox) const noexcept</argsstring>
        <name>UNSAFE_sandboxed</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <briefdescription>
<para>Like UNSAFE_unverified, but get the underlying sandbox representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sandbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to sandbox. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="284" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="284" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1af226dfc5118370a104707438292febdd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::app_pointer&lt; T, T_Sbx &gt;::UNSAFE_unverified</definition>
        <argsstring>() noexcept</argsstring>
        <name>UNSAFE_unverified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="289" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classrlbox_1_1app__pointer_1a76996c5b562243af1ac52a2ae2ac5333" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto rlbox::app_pointer&lt; T, T_Sbx &gt;::UNSAFE_sandboxed</definition>
        <argsstring>(rlbox_sandbox&lt; T_Sbx &gt; &amp;sandbox) noexcept</argsstring>
        <name>UNSAFE_sandboxed</name>
        <param>
          <type><ref refid="classrlbox_1_1rlbox__sandbox" kindref="compound">rlbox_sandbox</ref>&lt; T_Sbx &gt; &amp;</type>
          <declname>sandbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="290" column="15" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="290" bodyend="294"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" line="189" column="1" bodyfile="/home/d/hack/rlbox_sandboxing_api/code/include/rlbox_policy_types.hpp" bodystart="190" bodyend="295"/>
    <listofallmembers>
      <member refid="classrlbox_1_1app__pointer_1a9a779d2058178928e060a2d69c78b719" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>app_pointer</name></member>
      <member refid="classrlbox_1_1app__pointer_1a36b2cfadbbe96bfa3a23fed185617c75" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>app_pointer</name></member>
      <member refid="classrlbox_1_1app__pointer_1a845c3f2be96091b1ab10ccab774a785b" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>app_pointer</name></member>
      <member refid="classrlbox_1_1app__pointer_1ac431668747389fe131382a37086fedcb" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>get_raw_sandbox_value</name></member>
      <member refid="classrlbox_1_1app__pointer_1a9a93a22c43b022e662c8b80539aba625" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>get_raw_sandbox_value</name></member>
      <member refid="classrlbox_1_1app__pointer_1a496a550f093c1598827246b828b26aa2" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>get_raw_value</name></member>
      <member refid="classrlbox_1_1app__pointer_1aa37f6d1b9ceca769cf70e280c47c9876" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>get_raw_value</name></member>
      <member refid="classrlbox_1_1app__pointer_1a9ebd318f1fc8716a48548ba8e34c82fa" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>idx</name></member>
      <member refid="classrlbox_1_1app__pointer_1a055dff0387ef3033e81f5d11e2381d77" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>idx_unsandboxed</name></member>
      <member refid="classrlbox_1_1app__pointer_1a69b1e2004b643206b8141ab876aa9685" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>is_unregistered</name></member>
      <member refid="classrlbox_1_1app__pointer_1afde2232d3a1e0a1a98cacb28cab75d5f" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>map</name></member>
      <member refid="classrlbox_1_1app__pointer_1a9d0e4569cf9012d6c499b7af30a57e72" prot="private" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>move_obj</name></member>
      <member refid="classrlbox_1_1app__pointer_1abb7d911d68637690a990059b2f80aba4" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>operator=</name></member>
      <member refid="classrlbox_1_1app__pointer_1a626396f9c3be8c549bc35b11fe9d0158" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>to_tainted</name></member>
      <member refid="classrlbox_1_1app__pointer_1a91150874c356edccc9ba9e18256c3a77" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>unregister</name></member>
      <member refid="classrlbox_1_1app__pointer_1a1e5d8a1865acf9d29d53f0e8543e3fa2" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>UNSAFE_sandboxed</name></member>
      <member refid="classrlbox_1_1app__pointer_1a76996c5b562243af1ac52a2ae2ac5333" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>UNSAFE_sandboxed</name></member>
      <member refid="classrlbox_1_1app__pointer_1a71209edbd57c65cd36d0b5c2c03fde3f" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>UNSAFE_unverified</name></member>
      <member refid="classrlbox_1_1app__pointer_1af226dfc5118370a104707438292febdd" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>UNSAFE_unverified</name></member>
      <member refid="classrlbox_1_1app__pointer_1a44b6cb107e00d8869078bccd4f76233f" prot="public" virt="non-virtual"><scope>rlbox::app_pointer</scope><name>~app_pointer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
